{"version":3,"sources":["logo.svg","DBHandler.jsx","ventanaConci.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DBHandler","HOST","window","location","href","fun","anio","this","enviarPeticion","ejercicio","lista","lineas","datos","url","metodo","asinc","arguments","length","undefined","request","XMLHttpRequest","onreadystatechange","readyState","status","responseText","JSON","parse","open","datosFinales","setRequestHeader","send","stringify","convertirFecha","fecha","substring","mes","Menu","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","banco","cuentasBancarias","cuentasContables","cuentaBacanria","cuentaContable","cuentas","sucursal","archivo","movimientos","posicion","desde","hasta","resumen","db","pedirCuentas","cargarCuentas","bind","assertThisInitialized","cuenta","dic","cuentaBancaria","nro_cuenta","setState","file","reader","FileReader","cuentabancaria","cuentacontable","limpiarInterfaz","onload","progressEvent","lines","result","split","entrada","impactarExtracto","readAsText","x","push","react_default","a","createElement","index_es","value","key","_this2","style","textAlign","variant","label","onChange","ev","target","htmlFor","shrink","inputProps","id","width","seleccionarCuenta","InputLabelProps","type","urlArchivo","files","onClick","leerArchivo","Component","App","className","ventanaConci_Menu","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94cb8387.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default class DBHandler{\n\n    HOST = window.location.href\n\n    pedirCuentas(fun,anio){\n        this.enviarPeticion(fun,'datos/devolverCuentas','POST',{ejercicio:anio},true)\n    }\n\n    enviarFilas(fun,lista){\n        this.enviarPeticion(fun,'conci/cargar','POST',{lineas:lista},true)\n    }\n\n    impactarExtracto(fun,datos){\n        this.enviarPeticion(fun,'extracto/impactar','POST',datos,true)\n    }\n\n\n    enviarPeticion(fun,url,metodo,datos,asinc=true){\n        var request = new XMLHttpRequest();\n        request.onreadystatechange = function(){\n        if(this.readyState === 4 && this.status === 200){\n            if (fun != null){\n            if (this.responseText.length > 0){\n                fun(JSON.parse(this.responseText));\n            }\n            else{\n                fun();\n            }\n            }\n        }\n        };\n        request.open(metodo,this.HOST+url,asinc);\n        var datosFinales = {};\n        datosFinales = datos;\n        if (metodo == \"POST\"){\n        request.setRequestHeader('Content-type','application/json');\n        request.send(JSON.stringify(datosFinales));\n        }\n        else {request.send();}\n    }\n}","import React,{Component} from 'react';\nimport {TextField,Paper,Select,MenuItem,Typography,Button,FormControl,InputLabel} from '@material-ui/core';\nimport DBHandler from './DBHandler';\n\nfunction convertirFecha(fecha){\n    let anio = fecha.substring(0,4)\n    let mes = fecha.substring(5,7)\n    let dia = fecha.substring(8,10)\n    return dia + '/' + mes + '/' + anio\n}\n\n\n\nexport default class Menu extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            banco:'BP',\n            cuentasBancarias:[],\n            cuentasContables:[],\n            cuentaBacanria:'',\n            cuentaContable:'',\n            cuentas:[],\n            sucursal:'',\n            archivo:'',\n            movimientos:[],\n            posicion:null,\n            desde:'',\n            hasta:'',\n            resumen:''\n        }\n        this.db = new DBHandler()\n        this.db.pedirCuentas(this.cargarCuentas.bind(this),2019)\n    }\n\n\n    seleccionarCuenta(cuenta){\n        \n        let dic = {\n            cuentaBancaria:this.state.cuentas[cuenta].cuenta,\n            cuentaContable:this.state.cuentas[cuenta].nro_cuenta,\n            sucursal:this.state.cuentas[cuenta].sucursal,\n            posicion:cuenta,\n        }\n        this.setState(dic)\n\n    }\n    enviarDatos(datos){\n        return;\n    }\n\n    limpiarInterfaz(resumen){\n        this.setState({\n            cuentaBacanria:'',\n            cuentaContable:'',\n            sucursal:'',\n            archivo:'',\n            movimientos:[],\n            posicion:null,\n            desde:'',\n            hasta:'',\n            resumen:resumen\n        })\n    }\n\n    leerArchivo(){\n        let file = this.state.archivo;\n        let reader = new FileReader();\n        let dic ={\n            desde:convertirFecha(this.state.desde),\n            hasta:convertirFecha(this.state.hasta),\n            cuentabancaria:this.state.cuentaBancaria,\n            cuentacontable:this.state.cuentaContable,\n            banco:this.state.banco,\n            sucursal:this.state.sucursal,\n        }\n\n        if(dic.desde.length === 0 || dic.hasta.length === 0 || \n            dic.cuentabancaria.length === 0 || dic.cuentacontable.length === 0 \n            || dic.banco.length === 0 || dic.sucursal.length === 0){\n                return\n        }\n        let fun = this.limpiarInterfaz.bind(this)\n        let db = this.db\n        reader.onload = function(progressEvent){\n        \n            let lines = this.result.split('\\n');\n            dic.entrada = lines;\n            db.impactarExtracto(fun,dic);\n            \n    \n        };\n        reader.readAsText(file);\n    }\n\n    cargarCuentas(cuentas){\n        let cuentasBancarias = [];\n        let cuentasContables = [];\n        for (let x = 0; x < cuentas.length; x++){\n\n            cuentasBancarias.push(<MenuItem value={x} key={x}> {cuentas[x].cuenta}</MenuItem>);\n            cuentasContables.push(<MenuItem value={x} key={x}> {cuentas[x].nro_cuenta}</MenuItem>);\n            \n        }\n\n        this.setState(\n            {\n                cuentasBancarias:cuentasBancarias,\n                cuentasContables:cuentasContables,\n                cuentas:cuentas\n            })\n    }\n\n    render(){\n        return (<div style={{textAlign:'center'}}>\n            <Typography variant='title'>Conciliaciones Banco Provincia</Typography><br/>\n            <div>\n                <TextField \n                    value={this.state.sucursal} label='Codigo de Sucursal'\n                    onChange={(ev)=>this.setState({banco:ev.target.value})}\n                ></TextField>\n                <FormControl>\n                    <InputLabel htmlFor='cuentabancaria' shrink={true}>Cuenta Bancaria</InputLabel>\n                    <Select inputProps={{id:'cuentabancaria'}}\n                        value={this.state.posicion} style={{width:'150px'}}\n                        onChange={(ev)=>this.seleccionarCuenta.bind(this)(ev.target.value)}\n                    >\n                        {this.state.cuentasBancarias}\n                    </Select>\n                </FormControl>\n                <FormControl>\n                    <InputLabel htmlFor='cuentacontable' shrink={true}>Cuenta Contable</InputLabel>\n                    <Select\n                        value={this.state.posicion} style={{width:'150px'}} inputProps={{id:'cuentabancaria'}}\n                        onChange={(ev)=>this.seleccionarCuenta.bind(this)(ev.target.value)}\n                    >\n                        {this.state.cuentasContables}\n                    </Select>\n                </FormControl>\n            </div>\n            <div>\n                <TextField\n                    InputLabelProps={{shrink:true}}\n                    value={this.state.desde} label='Desde' type='date'\n                    onChange={(ev)=>{this.setState({desde:ev.target.value})}}\n                ></TextField>\n                <TextField\n                    InputLabelProps={{shrink:true}}\n                    value={this.state.hasta} label='Hasta' type='date'\n                    onChange={(ev)=>{this.setState({hasta:ev.target.value})}}\n                ></TextField>\n            </div>\n            <div>\n                <TextField\n                    value={this.state.urlArchivo} label='Archivo' type='file'\n                    onChange={(ev)=>this.setState({\n                        urlArchivo:ev.target.value,\n                        archivo:ev.target.files[0]})}\n                ></TextField>\n                <Button\n                    onClick={this.leerArchivo.bind(this)}\n                >\n                    Enviar\n                </Button>\n            </div>\n        </div>)\n    }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport VentanaConci from './ventanaConci';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <VentanaConci/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}